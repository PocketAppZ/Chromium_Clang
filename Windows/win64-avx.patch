diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 21683acdb7489..7092266694d62 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -727,7 +727,7 @@ config("compiler") {
 
     # Limit the size of the ThinLTO cache to the lesser of 10% of
     # available disk space, 40GB and 100000 files.
-    cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
+    # cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
 
     # An import limit of 30 has better performance (per speedometer) and lower
     # binary size than the default setting of 100.
@@ -739,10 +739,12 @@ config("compiler") {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
-        "/lldltocache:" +
-            rebase_path("$root_out_dir/thinlto-cache", root_build_dir),
-        "/lldltocachepolicy:$cache_policy",
+        # "/lldltocache:" +
+        #     rebase_path("$root_out_dir/thinlto-cache", root_build_dir),
+        # "/lldltocachepolicy:$cache_policy",
         "-mllvm:-disable-auto-upgrade-debug-info",
+        "-mllvm:-enable-gvn-hoist",
+        "-mllvm:-loop-rotate-multi",
       ]
     } else {
       ldflags += [ "-flto=thin" ]
@@ -1003,6 +1005,8 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-cpu=sandybridge",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1055,10 +1059,11 @@ config("compiler") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 3
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
+      # ldflags += [ "-opt:lldltocgo=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
     }
@@ -1086,13 +1091,14 @@ config("thinlto_optimize_default") {
 config("thinlto_optimize_max") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     if (thin_lto_enable_optimizations) {
-      lto_opt_level = 2
+      lto_opt_level = 3
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 3
     }
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
+      # ldflags += [ "-opt:lldltocgo=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
     }
@@ -1130,7 +1136,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-march=native",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -2290,8 +2296,8 @@ if (is_win) {
     common_optimize_on_cflags += [
       # Put data and code in their own sections, so that unused symbols
       # can be removed at link time with --gc-sections.
-      "-fdata-sections",
-      "-ffunction-sections",
+      # "-fdata-sections",
+      # "-ffunction-sections",
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
@@ -2303,8 +2309,8 @@ if (is_win) {
       # Specifically tell the linker to perform optimizations.
       # See http://lwn.net/Articles/192624/ .
       # -O2 enables string tail merge optimization in gold and lld.
-      "-Wl,-O2",
-      "-Wl,--gc-sections",
+      # "-Wl,-O2",
+      # "-Wl,--gc-sections",
     ]
   }
 
@@ -2349,17 +2355,17 @@ config("optimize") {
     if (chrome_pgo_phase != 2) {
       # Favor size over speed, /O1 must be before the common flags.
       # /O1 implies /Os and /GF.
-      cflags = [ "/O1" ] + common_optimize_on_cflags + [ "/Oi" ]
-      rustflags = [ "-Copt-level=s" ]
+      cflags = [ "-Xclang", "-O3", ] + common_optimize_on_cflags + [ "/Oi" ]
+      rustflags = [ "-Copt-level=3" ]
     } else {
       # PGO requires all translation units to be compiled with /O2. The actual
       # optimization level will be decided based on the profiling data.
-      cflags = [ "/O2" ] + common_optimize_on_cflags + [ "/Oi" ]
+      cflags = [ "-Xclang", "-O3", ] + common_optimize_on_cflags + [ "/Oi" ]
 
       # https://doc.rust-lang.org/rustc/profile-guided-optimization.html#usage
       # suggests not using an explicit `-Copt-level` at all, and the default is
       # to optimize for performance like `/O2` for clang.
-      rustflags = []
+      rustflags = [ "-Copt-level=3" ]
     }
   } else if (optimize_for_size) {
     # Favor size over speed.
@@ -2392,12 +2398,12 @@ config("optimize") {
     # vectorization while otherwise optimizing for size.
     rustflags = [ "-Copt-level=s" ]
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "-Oz" ] + common_optimize_on_cflags
 
     # The `-O3` for clang turns on extra optimizations compared to the standard
     # `-O2`. But for rust, `-Copt-level=3` is the default and is thus reliable
     # to use.
-    rustflags = [ "-Copt-level=3" ]
+    rustflags = [ "-Copt-level=z" ]
   }
   ldflags = common_optimize_on_ldflags
 }
@@ -2459,11 +2465,11 @@ config("optimize_max") {
     if (is_win) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
-      cflags = [ "/O2" ] + common_optimize_on_cflags
+      cflags = [ "-Xclang", "-O3", ] + common_optimize_on_cflags
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-Oz" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
@@ -2492,11 +2498,11 @@ config("optimize_speed") {
     if (is_win) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
-      cflags = [ "/O2" ] + common_optimize_on_cflags
+      cflags = [ "-Xclang", "-O3", ] + common_optimize_on_cflags
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O3" ] + common_optimize_on_cflags
+      cflags = [ "-Oz" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/build/config/win/BUILD.gn b/build/config/win/BUILD.gn
index ddcc94a2d5468..7ca0c47d426f3 100644
--- a/build/config/win/BUILD.gn
+++ b/build/config/win/BUILD.gn
@@ -86,7 +86,7 @@ config("compiler") {
 
   cflags += [
     # Work around crbug.com/526851, bug in VS 2015 RTM compiler.
-    "/Zc:sizedDealloc-",
+    # "/Zc:sizedDealloc-",
   ]
 
   if (is_clang) {
@@ -127,7 +127,7 @@ config("compiler") {
     # microarchitecture. MSVC only supports a subset of architectures, and the
     # next step after SSE2 will be AVX.
     if (current_cpu == "x86" || current_cpu == "x64") {
-      cflags += [ "-msse3" ]
+      cflags += [ "-mavx", "-mcx16", "-msahf", "-mcrc32", "-mpopcnt", "-mpclmul", "-mxsave", "-mxsaveopt", ]
     }
 
     # Enable ANSI escape codes if something emulating them is around (cmd.exe
@@ -206,7 +206,7 @@ config("compiler") {
     # PDB file by about 5%) but does not otherwise alter the output binary. It
     # is enabled opportunistically for builds where it is not prohibited (not
     # supported when incrementally linking, or using /debug:fastlink).
-    ldflags += [ "/PROFILE" ]
+    # ldflags += [ "/PROFILE" ]
   }
 
   # arflags apply only to static_libraries. The normal linker configs are only
diff --git a/chrome/tools/build/win/create_installer_archive.py b/chrome/tools/build/win/create_installer_archive.py
index 07387a69ada91..1d7832f9c22cd 100755
--- a/chrome/tools/build/win/create_installer_archive.py
+++ b/chrome/tools/build/win/create_installer_archive.py
@@ -80,21 +80,8 @@ def CompressUsingLZMA(build_dir, compressed_file, input_file, verbose, fast):
   else:
     cmd.extend(
       [
-          # Flags equivalent to -mx9 (ultra) but with the bcj2 turned on (exe
-          # pre-filter). This results in a ~2.3MB decrease in installer size on
-          # a 24MB installer.
-          # Additionally, these settings reflect a 7zip 4.42 and up change in
-          # the definition of -mx9, increasting the dicionary size moving to
-          # 26bit = 64MB. This results in an additional ~3.5MB decrease.
-          # Older 7zip versions can support these settings, as these changes
-          # rely on existing functionality in the lzma format.
-          '-m0=BCJ2',
-          '-m1=LZMA:d27:fb128',
-          '-m2=LZMA:d22:fb128:mf=bt2',
-          '-m3=LZMA:d22:fb128:mf=bt2',
-          '-mb0:1',
-          '-mb0s1:2',
-          '-mb0s2:3',
+          '-mx5',
+          '-myx=7',
       ])
   cmd.extend(
     [
diff --git a/chrome/updater/win/installer/create_installer_archive.py b/chrome/updater/win/installer/create_installer_archive.py
index fca63d47b722e..1c2d4f68c9124 100644
--- a/chrome/updater/win/installer/create_installer_archive.py
+++ b/chrome/updater/win/installer/create_installer_archive.py
@@ -42,16 +42,8 @@ def CompressUsingLZMA(build_dir, compressed_file, input_file, verbose, fast):
         cmd.append('-mx1')
     else:
         cmd.extend([
-            # Flags equivalent to -mx9 (ultra) but with the bcj2 turned on (exe
-            # pre-filter). These arguments are the similar to what the Chrome
-            # mini-installer is using.
-            '-m0=BCJ2',
-            '-m1=LZMA:d27:fb128',
-            '-m2=LZMA:d22:fb128:mf=bt2',
-            '-m3=LZMA:d22:fb128:mf=bt2',
-            '-mb0:1',
-            '-mb0s1:2',
-            '-mb0s2:3',
+            '-mx5',
+            '-myx=7',
         ])
     cmd.extend([
         os.path.abspath(compressed_file),
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index 2ceacdeaf24dd..1df6d6bb75630 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -347,7 +347,7 @@ BASE_FEATURE(kPlatformHEVCDecoderSupport,
 // Enables HEVC hardware accelerated encoding for Windows, Mac, and Android.
 BASE_FEATURE(kPlatformHEVCEncoderSupport,
              "PlatformHEVCEncoderSupport",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 #endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_ANDROID)
 #endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index ec5e5df9760ad..a4cdc594d6820 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -215,33 +215,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -425,7 +399,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index e62b2af59003c..86aec8821c578 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -74,7 +74,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -86,6 +85,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
diff --git a/tools/cfi/ignores.txt b/tools/cfi/ignores.txt
index 73080483ab32b..9304584dedea4 100644
--- a/tools/cfi/ignores.txt
+++ b/tools/cfi/ignores.txt
@@ -144,6 +144,8 @@ type:sandbox::TargetServices
 
 [cfi-icall]
 
+fun:ft_size_reset_iterator
+
 ######### Cross-DSO icalls using dynamically resolved symbols crbug.com/771365
 
 # ANGLE
