diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 41c96adc70a27..f79ee699fcefe 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -482,10 +482,17 @@ config("compiler") {
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
   if (is_linux || is_chromeos || is_android || is_fuchsia) {
-    asmflags += [ "-fPIC" ]
-    cflags += [ "-fPIC" ]
-    ldflags += [ "-fPIC" ]
-    rustflags += [ "-Crelocation-model=pic" ]
+    asmflags += [ "-fPIC", "-fno-emulated-tls", "-w", ]
+    cflags += [ "-fPIC","-fno-emulated-tls", "-w", ]
+    ldflags += [ "-fPIC", "-Wl,-plugin-opt=-emulated-tls=0", "-w", ]
+    # ldflags += [ "-Wl,--symbol-ordering-file=../../chrome/build/pgo_profiles/linux-order.txt", ]
+    rustflags += [ "-Crelocation-model=pic", "-Awarnings", ]
+
+    if (is_clang && chrome_pgo_phase == 2) {
+      asmflags += [ "-fbasic-block-sections=labels" ]
+      cflags += [ "-fbasic-block-sections=labels" ]
+      rustflags += [ "-Cllvm-args=-basic-block-sections=labels" ]
+    }
 
     if (!is_clang) {
       # Use pipes for communicating between sub-processes. Faster.
@@ -533,7 +540,7 @@ config("compiler") {
     if (is_win) {
       cflags += [ "/Zc:sizedDealloc-" ]
     } else {
-      cflags += [ "-fno-sized-deallocation" ]
+      cflags += [ "-fsized-deallocation" ]
     }
   }
 
@@ -585,14 +592,14 @@ config("compiler") {
     if (default_toolchain != "//build/toolchain/cros:target" &&
         !llvm_android_mainline) {
       cflags += [
-        "-mllvm",
-        "-split-threshold-for-reg-with-hint=0",
+        # "-mllvm",
+        # "-split-threshold-for-reg-with-hint=0",
       ]
       if (use_thin_lto && is_a_target_toolchain) {
         if (is_win) {
           ldflags += [ "-mllvm:-split-threshold-for-reg-with-hint=0" ]
         } else {
-          ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
+          # ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
         }
       }
     }
@@ -601,7 +608,7 @@ config("compiler") {
     if (is_win) {
       cflags += [ "/clang:-ffp-contract=off" ]
     } else {
-      cflags += [ "-ffp-contract=off" ]
+      cflags += [ "-ffp-contract=fast" ]
     }
   }
 
@@ -754,7 +761,7 @@ config("compiler") {
     # [0]: https://pinpoint-dot-chromeperf.appspot.com/job/16984a18be0000
     # [1]: https://pinpoint-dot-chromeperf.appspot.com/job/11984a18be0000
     # [2]: https://ci.chromium.org/ui/p/chromium/builders/try/android-binary-size/1848442
-    import_instr_limit = 30
+    import_instr_limit = 100
 
     if (is_win) {
       ldflags += [
@@ -764,6 +771,7 @@ config("compiler") {
       ]
     } else {
       ldflags += [ "-flto=thin" ]
+      # ldflags += [ "-Wl,-mllvm,-polly" ]
 
       # Enabling ThinLTO on Chrome OS too, in an effort to reduce the memory
       # usage in crbug.com/1038040. Note this will increase build time in
@@ -1023,6 +1031,10 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ztune-cpu=haswell",
+    "-Ctarget-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+avx,+avx2,+fma,+f16c",
+    "-Cllvm-args=-fp-contract=fast",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1098,12 +1110,13 @@ config("compiler") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 3
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1129,15 +1142,16 @@ config("thinlto_optimize_default") {
 config("thinlto_optimize_max") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     if (thin_lto_enable_optimizations) {
-      lto_opt_level = 2
+      lto_opt_level = 3
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 3
     }
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1173,7 +1187,9 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-mtune=haswell",
+        "-msse3", "-mssse3","-msse4.1", "-msse4.2",
+        "-mavx", "-mavx2", "-mfma", "-mf16c",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -2357,11 +2373,13 @@ if (is_win) {
       # can be removed at link time with --gc-sections.
       "-fdata-sections",
       "-ffunction-sections",
+      "-funique-section-names",
+      "-fseparate-named-sections",
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
       # smaller.
-      common_optimize_on_cflags += [ "-fno-unique-section-names" ]
+      # common_optimize_on_cflags += [ "-fno-unique-section-names" ]
     }
 
     if (is_official_build) {
@@ -2461,7 +2479,7 @@ config("optimize") {
     # vectorization while otherwise optimizing for size.
     rustflags = [ "-Copt-level=s" ]
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "-O3" ] + common_optimize_on_cflags
 
     # The `-O3` for clang turns on extra optimizations compared to the standard
     # `-O2`. But for rust, `-Copt-level=3` is the default and is thus reliable
@@ -2532,7 +2550,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/build/config/compiler/pgo/BUILD.gn b/build/config/compiler/pgo/BUILD.gn
index afa4aa28da9d3..7b1a7d0e66255 100644
--- a/build/config/compiler/pgo/BUILD.gn
+++ b/build/config/compiler/pgo/BUILD.gn
@@ -151,12 +151,15 @@ config("pgo_optimization_flags") {
       if (is_win) {
         ldflags = [ "-mllvm:-enable-ext-tsp-block-placement=1" ]
       } else {
-        ldflags = [ "-Wl,-mllvm,-enable-ext-tsp-block-placement=1" ]
+        ldflags = [
+          "-Wl,-mllvm,-enable-ext-tsp-block-placement",
+          "-Wl,-mllvm,-enable-split-machine-functions",
+        ]
       }
     } else {
       cflags += [
-        "-mllvm",
-        "-enable-ext-tsp-block-placement=1",
+        "-mllvm", "-enable-ext-tsp-block-placement",
+        "-fsplit-machine-functions",
       ]
     }
   }
diff --git a/chrome/common/chrome_paths_linux.cc b/chrome/common/chrome_paths_linux.cc
index 62da648c6acb0..e8f5aad43c1a3 100644
--- a/chrome/common/chrome_paths_linux.cc
+++ b/chrome/common/chrome_paths_linux.cc
@@ -94,7 +94,7 @@ bool GetDefaultUserDataDirectory(base::FilePath* result) {
 #elif BUILDFLAG(GOOGLE_CHROME_BRANDING)
   std::string data_dir_basename = "google-chrome";
 #else
-  std::string data_dir_basename = "chromium";
+  std::string data_dir_basename = "chromium-clang";
 #endif
   *result = config_dir.Append(data_dir_basename + GetChannelSuffixForDataDir());
   return true;
diff --git a/chrome/installer/linux/common/installer.include b/chrome/installer/linux/common/installer.include
index 5aca79fa700e4..0e5182f3de612 100644
--- a/chrome/installer/linux/common/installer.include
+++ b/chrome/installer/linux/common/installer.include
@@ -138,16 +138,16 @@ stage_install_common() {
   # is_component_build flag is true.
 
   # app
-  STRIPPEDFILE="${OUTPUTDIR}/${PROGNAME}.stripped"
+  STRIPPEDFILE="${OUTPUTDIR}/${PROGNAME}"
   install -m 755 "${STRIPPEDFILE}" "${STAGEDIR}/${INSTALLDIR}/${PROGNAME}"
 
   # crashpad
-  strippedfile="${OUTPUTDIR}/chrome_crashpad_handler.stripped"
+  strippedfile="${OUTPUTDIR}/chrome_crashpad_handler"
   install -m 755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome_crashpad_handler"
 
   # Final permissions for the chrome-management-service will be set in
   # postinst chrome_management_service_setup().
-  strippedfile="${OUTPUTDIR}/chrome_management_service.stripped"
+  strippedfile="${OUTPUTDIR}/chrome_management_service"
   install -m 755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome-management-service"
 
   # resources
@@ -183,7 +183,7 @@ stage_install_common() {
   # where it did not support hyphens, so this is stuck as is to avoid breaking
   # anyone who expects the build artifact to have the underscore.
   # the code looks for, but the build targets can't use hyphens (scons bug?)
-  strippedfile="${OUTPUTDIR}/${PROGNAME}_sandbox.stripped"
+  strippedfile="${OUTPUTDIR}/${PROGNAME}_sandbox"
   install -m 4755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome-sandbox"
 
   # l10n paks
@@ -225,7 +225,7 @@ stage_install_common() {
   # ANGLE
   if [ -f "${OUTPUTDIR}/libEGL.so" ]; then
     for file in libEGL.so libGLESv2.so; do
-      strippedfile="${OUTPUTDIR}/${file}.stripped"
+      strippedfile="${OUTPUTDIR}/${file}"
       install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
     done
   fi
@@ -233,7 +233,7 @@ stage_install_common() {
   # ANGLE's libvulkan library
   if [ -f "${OUTPUTDIR}/libvulkan.so.1" ]; then
     file="libvulkan.so.1"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
@@ -241,7 +241,7 @@ stage_install_common() {
   if [ -f "${OUTPUTDIR}/libvk_swiftshader.so" ]; then
     install -m 755 -d "${STAGEDIR}/${INSTALLDIR}/"
     file="libvk_swiftshader.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
     # Install the ICD json file to point ANGLE to libvk_swiftshader.so
     install -m 644 "${OUTPUTDIR}/vk_swiftshader_icd.json" "${STAGEDIR}/${INSTALLDIR}/"
@@ -250,19 +250,19 @@ stage_install_common() {
   # Optimization Guide Internal
   if [ -f "${OUTPUTDIR}/liboptimization_guide_internal.so" ]; then
     file="liboptimization_guide_internal.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
   # QT shim
   if [ -f "${OUTPUTDIR}/libqt5_shim.so" ]; then
     file="libqt5_shim.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
   if [ -f "${OUTPUTDIR}/libqt6_shim.so" ]; then
     file="libqt6_shim.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
@@ -357,19 +357,6 @@ stage_install_common() {
       "${STAGEDIR}/usr/share/man/man1/${PACKAGE}.1.gz"
   fi
 
-  # Check to make sure all the ELF binaries are stripped.
-  UNSTRIPPED_BINS=
-  for elf in $(find "${STAGEDIR}/${INSTALLDIR}/" -type f | xargs file |
-                grep ELF | grep "not stripped" | awk '{print $1;}' |
-                sed 's/:$//'); do
-    UNSTRIPPED_BINS="${UNSTRIPPED_BINS} ${elf}"
-  done
-
-  if [ -n "${UNSTRIPPED_BINS}" ]; then
-    echo "ERROR: Found unstripped ELF files:${UNSTRIPPED_BINS}" 1>&2
-    exit 1
-  fi
-
   # Check to make sure no ELF binaries set RPATH.
   if [ "${TARGET_OS}" != "chromeos" ]; then
     RPATH_BINS=
diff --git a/chrome/installer/linux/common/repo.cron b/chrome/installer/linux/common/repo.cron
index 15bbf25f2b443..8b137891791fe 100755
--- a/chrome/installer/linux/common/repo.cron
+++ b/chrome/installer/linux/common/repo.cron
@@ -1,44 +1 @@
-#!/bin/sh
-#
-# Copyright 2009 The Chromium Authors
-# Use of this source code is governed by a BSD-style license that can be
-# found in the LICENSE file.
-#
-# This script is part of the @@PACKAGE@@ package.
-#
-# It creates the repository configuration file for package updates, and it
-# monitors that config to see if it has been disabled by the overly aggressive
-# distro upgrade process (e.g.  intrepid -> jaunty). When this situation is
-# detected, the respository will be re-enabled. If the respository is disabled
-# for any other reason, this won't re-enable it.
-#
-# This functionality can be controlled by creating the $DEFAULTS_FILE and
-# setting "repo_add_once" and/or "repo_reenable_on_distupgrade" to "true" or
-# "false" as desired. An empty $DEFAULTS_FILE is the same as setting both values
-# to "false".
 
-@@include@@../common/variables.include
-
-@@include@@apt.include
-
-## MAIN ##
-if [ -r "$DEFAULTS_FILE" ]; then
-  . "$DEFAULTS_FILE"
-fi
-
-install_key
-
-if [ "$repo_add_once" = "true" ]; then
-  create_sources_lists
-  RES=$?
-  # Sources creation succeeded, so stop trying.
-  if [ $RES -ne 2 ]; then
-    sed -i -e 's/[[:space:]]*repo_add_once=.*/repo_add_once="false"/' "$DEFAULTS_FILE"
-  fi
-else
-  update_bad_sources
-fi
-
-if [ "$repo_reenable_on_distupgrade" = "true" ]; then
-  handle_distro_upgrade
-fi
diff --git a/chrome/installer/linux/debian/build.sh b/chrome/installer/linux/debian/build.sh
index 851755cbd219d..dfec16d288aa3 100755
--- a/chrome/installer/linux/debian/build.sh
+++ b/chrome/installer/linux/debian/build.sh
@@ -121,7 +121,7 @@ do_package() {
   local PACKAGEFILE="${PACKAGE}-${CHANNEL}_${VERSIONFULL}_${ARCHITECTURE}.deb"
   if [ ${IS_OFFICIAL_BUILD} -ne 0 ]; then
     (cd "${TMPFILEDIR}" && ar -x "${TMPFILEDIR}/${PACKAGEFILE}")
-    xz -z9 -T0 --lzma2='dict=256MiB' "${TMPFILEDIR}/data.tar"
+    xz -z6 -e -T0 "${TMPFILEDIR}/data.tar"
     xz -z0 "${TMPFILEDIR}/control.tar"
     ar -d "${TMPFILEDIR}/${PACKAGEFILE}" control.tar data.tar
     ar -r "${TMPFILEDIR}/${PACKAGEFILE}" "${TMPFILEDIR}/control.tar.xz" \
diff --git a/chrome/installer/linux/debian/postrm b/chrome/installer/linux/debian/postrm
index 3e1cadc8296ca..aa5848db6913f 100755
--- a/chrome/installer/linux/debian/postrm
+++ b/chrome/installer/linux/debian/postrm
@@ -15,22 +15,8 @@ fi
 
 @@include@@../common/variables.include
 
-@@include@@../common/apt.include
+# @@include@@../common/apt.include
 
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-# Only remove the defaults file if it is not empty. An empty file was probably
-# put there by the sysadmin to disable automatic repository configuration, as
-# per the instructions on the package download page.
-if [ -s "$DEFAULTS_FILE" ]; then
-  # Make sure the package defaults are removed before the repository config,
-  # otherwise it could result in the repository config being removed, but the
-  # package defaults remain and are set to not recreate the repository config.
-  # In that case, future installs won't recreate it and won't get auto-updated.
-  rm "$DEFAULTS_FILE" || exit 1
-fi
-# Remove any Google repository added by the package.
-clean_sources_lists
-uninstall_key
diff --git a/content/common/gpu_pre_sandbox_hook_linux.cc b/content/common/gpu_pre_sandbox_hook_linux.cc
index e454bcdc19517..4163b5d017ae4 100644
--- a/content/common/gpu_pre_sandbox_hook_linux.cc
+++ b/content/common/gpu_pre_sandbox_hook_linux.cc
@@ -269,6 +269,17 @@ void AddAmdGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
       "/usr/lib64/dri/r300_dri.so",
       "/usr/lib64/dri/r600_dri.so",
       "/usr/lib64/dri/radeonsi_dri.so",
+      // GPU Log Warning Workaround
+      "/usr/lib/libEGL.so.1",
+      "/usr/lib/libGLESv2.so.2",
+      "/usr/lib/libglapi.so.0",
+      "/usr/lib/dri/r300_dri.so",
+      "/usr/lib/dri/r600_dri.so",
+      "/usr/lib/dri/radeonsi_dri.so",
+      "/usr/share/vulkan/icd.d",
+      "/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
+      "/etc/vulkan/icd.d",
+      "/etc/vulkan/icd.d/radeon_icd.x86_64.json"
       // Allow libglvnd files and libs.
       "/usr/share/glvnd/egl_vendor.d",
       "/usr/share/glvnd/egl_vendor.d/50_mesa.json",
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index 722164960575e..56154724cd2fb 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -346,7 +346,7 @@ BASE_FEATURE(kPlatformHEVCDecoderSupport,
 // Enables HEVC hardware accelerated encoding for Windows, Mac, and Android.
 BASE_FEATURE(kPlatformHEVCEncoderSupport,
              "PlatformHEVCEncoderSupport",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 #endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_ANDROID)
 #endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index b3ca9c106e406..a6e3b0d5ea5db 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -222,33 +222,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -441,7 +415,7 @@ bool IsDefaultSupportedAudioType(const AudioType& type) {
 
 bool IsBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) && BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264) {
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) {
     return true;
   }
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) &&
diff --git a/media/filters/ffmpeg_glue.cc b/media/filters/ffmpeg_glue.cc
index e3a8c01362707..3d30a437e010d 100644
--- a/media/filters/ffmpeg_glue.cc
+++ b/media/filters/ffmpeg_glue.cc
@@ -156,6 +156,9 @@ const char* FFmpegGlue::GetAllowedVideoDecoders() {
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
     allowed_decoders.push_back("h264");
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
+#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
+    allowed_decoders.push_back("hevc");
+#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
     return base::JoinString(allowed_decoders, ",");
 #else
     return std::string();
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 5b8acb47e3848..24475a2f336d0 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -76,7 +76,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -89,6 +88,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       break;
 
     case VideoCodec::kH264:
+    case VideoCodec::kHEVC:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
       // with number of pixels.
diff --git a/media/webrtc/webrtc_features.cc b/media/webrtc/webrtc_features.cc
index a0a0649d5e5f6..ed1ffd27092fb 100644
--- a/media/webrtc/webrtc_features.cc
+++ b/media/webrtc/webrtc_features.cc
@@ -75,14 +75,14 @@ BASE_FEATURE(kWebRtcApmTellsIfPlayoutReferenceIsNeeded,
 // negotiate usage of H.265 in SDP in the direction of sending.
 BASE_FEATURE(kWebRtcAllowH265Send,
              "WebRtcAllowH265Send",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 // When enabled, allow H.265 codec to be used for receiving WebRTC streams.
 // Platform hardware H.265 decoder needs to be supported and enabled in order to
 // negotiate usage of H.265 in SDP in the direction of receiving.
 BASE_FEATURE(kWebRtcAllowH265Receive,
              "WebRtcAllowH265Receive",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 #if BUILDFLAG(IS_ANDROID)
 // Kill-switch for using 48 kHz as sample rate for Audio Processing Module
diff --git a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
index d0f74df97b98c..12e3fb2af9571 100644
--- a/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
+++ b/ui/ozone/platform/wayland/gpu/wayland_surface_factory.cc
@@ -213,6 +213,7 @@ WaylandSurfaceFactory::GetAllowedGLImplementations() {
     impls.emplace_back(gl::ANGLEImplementation::kOpenGL);
     impls.emplace_back(gl::ANGLEImplementation::kOpenGLES);
     impls.emplace_back(gl::ANGLEImplementation::kSwiftShader);
+    impls.emplace_back(gl::ANGLEImplementation::kVulkan);
     impls.emplace_back(gl::kGLImplementationEGLGLES2);
   }
   return impls;
