diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index de1cd6efc67b4..f0985c97e48c1 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -497,10 +497,16 @@ config("compiler") {
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
   if (is_linux || is_chromeos || is_android || is_fuchsia) {
-    asmflags += [ "-fPIC" ]
-    cflags += [ "-fPIC" ]
-    ldflags += [ "-fPIC" ]
-    rustflags += [ "-Crelocation-model=pic" ]
+    asmflags += [ "-fPIC", "-fno-emulated-tls", "-w", ]
+    cflags += [ "-fPIC","-fno-emulated-tls", "-w", ]
+    ldflags += [ "-fPIC", "-Wl,-plugin-opt=-emulated-tls=0", "-w", ]
+    rustflags += [ "-Crelocation-model=pic", "-Awarnings", ]
+
+    if (is_clang && chrome_pgo_phase == 2) {
+      asmflags += [ "-fbasic-block-sections=labels" ]
+      cflags += [ "-fbasic-block-sections=labels" ]
+      rustflags += [ "-Cllvm-args=-basic-block-sections=labels" ]
+    }
 
     if (!is_clang) {
       # Use pipes for communicating between sub-processes. Faster.
@@ -1022,6 +1028,9 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+avx",
+    "-Cllvm-args=-fp-contract=off",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1065,7 +1074,7 @@ config("compiler") {
     if (is_nacl_saigo) {
       defines += [ "_LIBCPP_ENABLE_ASSERTIONS=1" ]
     } else {
-      defines += [ "_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE" ]
+      defines += [ "_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST" ]
     }
   } else {
     defines += [ "_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_NONE" ]
@@ -1151,7 +1160,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-msse3", "-mssse3","-msse4.1", "-msse4.2", "-mavx",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -1159,7 +1168,6 @@ config("compiler_cpu_abi") {
       if (is_chromeos_lacros) {
         cflags += [
           "-mssse3",
-          "-msse4",
           "-msse4.1",
           "-msse4.2",
         ]
@@ -2316,11 +2324,12 @@ if (is_win) {
       # can be removed at link time with --gc-sections.
       "-fdata-sections",
       "-ffunction-sections",
+      "-funique-section-names",
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
       # smaller.
-      common_optimize_on_cflags += [ "-fno-unique-section-names" ]
+      # common_optimize_on_cflags += [ "-fno-unique-section-names" ]
     }
 
     common_optimize_on_ldflags += [
@@ -2487,7 +2496,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/build/config/compiler/pgo/BUILD.gn b/build/config/compiler/pgo/BUILD.gn
index f8293b2ef03f9..db44e6b9c91c5 100644
--- a/build/config/compiler/pgo/BUILD.gn
+++ b/build/config/compiler/pgo/BUILD.gn
@@ -141,14 +141,17 @@ config("pgo_optimization_flags") {
     # improve icache utilization and reduce the binary size.
     if (use_thin_lto) {
       if (is_win) {
-        ldflags = [ "-mllvm:-enable-ext-tsp-block-placement=1" ]
+        ldflags = [ "-mllvm:-enable-ext-tsp-block-placement" ]
       } else {
-        ldflags = [ "-Wl,-mllvm,-enable-ext-tsp-block-placement=1" ]
+        ldflags = [
+          "-Wl,-mllvm,-enable-ext-tsp-block-placement",
+          "-Wl,-mllvm,-enable-split-machine-functions",
+        ]
       }
     } else {
       cflags += [
-        "-mllvm",
-        "-enable-ext-tsp-block-placement=1",
+        "-mllvm", "-enable-ext-tsp-block-placement",
+        "-fsplit-machine-functions",
       ]
     }
   }
diff --git a/chrome/common/chrome_paths_linux.cc b/chrome/common/chrome_paths_linux.cc
index 62da648c6acb0..e8f5aad43c1a3 100644
--- a/chrome/common/chrome_paths_linux.cc
+++ b/chrome/common/chrome_paths_linux.cc
@@ -94,7 +94,7 @@ bool GetDefaultUserDataDirectory(base::FilePath* result) {
 #elif BUILDFLAG(GOOGLE_CHROME_BRANDING)
   std::string data_dir_basename = "google-chrome";
 #else
-  std::string data_dir_basename = "chromium";
+  std::string data_dir_basename = "chromium-clang";
 #endif
   *result = config_dir.Append(data_dir_basename + GetChannelSuffixForDataDir());
   return true;
diff --git a/chrome/installer/linux/common/installer.include b/chrome/installer/linux/common/installer.include
index 5d8b4116299b7..687a6eda023d7 100644
--- a/chrome/installer/linux/common/installer.include
+++ b/chrome/installer/linux/common/installer.include
@@ -139,16 +139,16 @@ stage_install_common() {
   # is_component_build flag is true.
 
   # app
-  STRIPPEDFILE="${OUTPUTDIR}/${PROGNAME}.stripped"
+  STRIPPEDFILE="${OUTPUTDIR}/${PROGNAME}"
   install -m 755 "${STRIPPEDFILE}" "${STAGEDIR}/${INSTALLDIR}/${PROGNAME}"
 
   # crashpad
-  strippedfile="${OUTPUTDIR}/chrome_crashpad_handler.stripped"
+  strippedfile="${OUTPUTDIR}/chrome_crashpad_handler"
   install -m 755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome_crashpad_handler"
 
   # Final permissions for the chrome-management-service will be set in
   # postinst chrome_management_service_setup().
-  strippedfile="${OUTPUTDIR}/chrome_management_service.stripped"
+  strippedfile="${OUTPUTDIR}/chrome_management_service"
   install -m 755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome-management-service"
 
   # resources
@@ -184,7 +184,7 @@ stage_install_common() {
   # where it did not support hyphens, so this is stuck as is to avoid breaking
   # anyone who expects the build artifact to have the underscore.
   # the code looks for, but the build targets can't use hyphens (scons bug?)
-  strippedfile="${OUTPUTDIR}/${PROGNAME}_sandbox.stripped"
+  strippedfile="${OUTPUTDIR}/${PROGNAME}_sandbox"
   install -m 4755 "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/chrome-sandbox"
 
   # l10n paks
@@ -219,7 +219,7 @@ stage_install_common() {
   # ANGLE
   if [ -f "${OUTPUTDIR}/libEGL.so" ]; then
     for file in libEGL.so libGLESv2.so; do
-      strippedfile="${OUTPUTDIR}/${file}.stripped"
+      strippedfile="${OUTPUTDIR}/${file}"
       install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
     done
   fi
@@ -227,7 +227,7 @@ stage_install_common() {
   # ANGLE's libvulkan library
   if [ -f "${OUTPUTDIR}/libvulkan.so.1" ]; then
     file="libvulkan.so.1"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
@@ -235,7 +235,7 @@ stage_install_common() {
   if [ -f "${OUTPUTDIR}/libvk_swiftshader.so" ]; then
     install -m 755 -d "${STAGEDIR}/${INSTALLDIR}/"
     file="libvk_swiftshader.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
     # Install the ICD json file to point ANGLE to libvk_swiftshader.so
     install -m 644 "${OUTPUTDIR}/vk_swiftshader_icd.json" "${STAGEDIR}/${INSTALLDIR}/"
@@ -244,19 +244,19 @@ stage_install_common() {
   # Optimization Guide Internal
   if [ -f "${OUTPUTDIR}/liboptimization_guide_internal.so" ]; then
     file="liboptimization_guide_internal.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
   # QT shim
   if [ -f "${OUTPUTDIR}/libqt5_shim.so" ]; then
     file="libqt5_shim.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
   if [ -f "${OUTPUTDIR}/libqt6_shim.so" ]; then
     file="libqt6_shim.so"
-    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    strippedfile="${OUTPUTDIR}/${file}"
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi
 
@@ -350,12 +350,12 @@ stage_install_common() {
   fi
 
   # Check to make sure all the ELF binaries are stripped.
-  UNSTRIPPED=$(find "${STAGEDIR}/${INSTALLDIR}/" -type f | xargs file |
-      grep ELF | grep -c "not stripped" || true)
-  if [ "${UNSTRIPPED}" != "0" ]; then
-    echo "ERROR: Found ${UNSTRIPPED} unstripped ELF files." 1>&2
-    exit 1
-  fi
+  # UNSTRIPPED=$(find "${STAGEDIR}/${INSTALLDIR}/" -type f | xargs file |
+  #     grep ELF | grep -c "not stripped" || true)
+  # if [ "${UNSTRIPPED}" != "0" ]; then
+  #   echo "ERROR: Found ${UNSTRIPPED} unstripped ELF files." 1>&2
+  #   exit 1
+  # fi
 
   # Check to make sure no ELF binaries set RPATH.
   if [ "${TARGET_OS}" != "chromeos" ]; then
diff --git a/chrome/installer/linux/common/repo.cron b/chrome/installer/linux/common/repo.cron
index 15bbf25f2b443..33e25bbaba36b 100755
--- a/chrome/installer/linux/common/repo.cron
+++ b/chrome/installer/linux/common/repo.cron
@@ -16,29 +16,3 @@
 # setting "repo_add_once" and/or "repo_reenable_on_distupgrade" to "true" or
 # "false" as desired. An empty $DEFAULTS_FILE is the same as setting both values
 # to "false".
-
-@@include@@../common/variables.include
-
-@@include@@apt.include
-
-## MAIN ##
-if [ -r "$DEFAULTS_FILE" ]; then
-  . "$DEFAULTS_FILE"
-fi
-
-install_key
-
-if [ "$repo_add_once" = "true" ]; then
-  create_sources_lists
-  RES=$?
-  # Sources creation succeeded, so stop trying.
-  if [ $RES -ne 2 ]; then
-    sed -i -e 's/[[:space:]]*repo_add_once=.*/repo_add_once="false"/' "$DEFAULTS_FILE"
-  fi
-else
-  update_bad_sources
-fi
-
-if [ "$repo_reenable_on_distupgrade" = "true" ]; then
-  handle_distro_upgrade
-fi
diff --git a/chrome/installer/linux/debian/build.sh b/chrome/installer/linux/debian/build.sh
index 7cd40b9c37cce..6616978af4f87 100755
--- a/chrome/installer/linux/debian/build.sh
+++ b/chrome/installer/linux/debian/build.sh
@@ -121,7 +121,7 @@ do_package() {
   local PACKAGEFILE="${PACKAGE}-${CHANNEL}_${VERSIONFULL}_${ARCHITECTURE}.deb"
   if [ ${IS_OFFICIAL_BUILD} -ne 0 ]; then
     (cd "${TMPFILEDIR}" && ar -x "${TMPFILEDIR}/${PACKAGEFILE}")
-    xz -z9 -T0 --lzma2='dict=256MiB' "${TMPFILEDIR}/data.tar"
+    xz -z6 -e --threads=0 "${TMPFILEDIR}/data.tar"
     xz -z0 "${TMPFILEDIR}/control.tar"
     ar -d "${TMPFILEDIR}/${PACKAGEFILE}" control.tar data.tar
     ar -r "${TMPFILEDIR}/${PACKAGEFILE}" "${TMPFILEDIR}/control.tar.xz" \
diff --git a/chrome/installer/linux/debian/postrm b/chrome/installer/linux/debian/postrm
index 3e1cadc8296ca..32fbab915001f 100755
--- a/chrome/installer/linux/debian/postrm
+++ b/chrome/installer/linux/debian/postrm
@@ -15,22 +15,6 @@ fi
 
 @@include@@../common/variables.include
 
-@@include@@../common/apt.include
-
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-# Only remove the defaults file if it is not empty. An empty file was probably
-# put there by the sysadmin to disable automatic repository configuration, as
-# per the instructions on the package download page.
-if [ -s "$DEFAULTS_FILE" ]; then
-  # Make sure the package defaults are removed before the repository config,
-  # otherwise it could result in the repository config being removed, but the
-  # package defaults remain and are set to not recreate the repository config.
-  # In that case, future installs won't recreate it and won't get auto-updated.
-  rm "$DEFAULTS_FILE" || exit 1
-fi
-# Remove any Google repository added by the package.
-clean_sources_lists
-uninstall_key
diff --git a/content/common/gpu_pre_sandbox_hook_linux.cc b/content/common/gpu_pre_sandbox_hook_linux.cc
index 4468ad1859bb9..0ed2646466c98 100644
--- a/content/common/gpu_pre_sandbox_hook_linux.cc
+++ b/content/common/gpu_pre_sandbox_hook_linux.cc
@@ -251,6 +251,11 @@ void AddAmdGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
       "/usr/lib64/dri/r300_dri.so",
       "/usr/lib64/dri/r600_dri.so",
       "/usr/lib64/dri/radeonsi_dri.so",
+      // GPU Log Warning Workaround
+      "/usr/share/vulkan/icd.d",
+      "/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
+      "/etc/vulkan/icd.d",
+      "/etc/vulkan/icd.d/radeon_icd.x86_64.json"
       // Allow libglvnd files and libs.
       "/usr/share/glvnd/egl_vendor.d",
       "/usr/share/glvnd/egl_vendor.d/50_mesa.json",
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index e789456e87089..552d2230e14bd 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -222,33 +222,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -435,7 +409,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index aaab17bdc3b9c..1ea4fdf3408a2 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -76,7 +76,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -88,6 +87,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
diff --git a/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc b/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
index 1e35b90bd3ac3..d0d510a7793e7 100644
--- a/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
+++ b/third_party/blink/renderer/core/css/properties/longhands/longhands_custom.cc
@@ -9730,7 +9730,7 @@ const CSSValue* MaskSize::CSSValueFromComputedStyleInternal(
     const ComputedStyle& style,
     const LayoutObject*,
     bool allow_visited_style) const {
-  CHECK(RuntimeEnabledFeatures::CSSMaskingInteropEnabled());
+  // CHECK(RuntimeEnabledFeatures::CSSMaskingInteropEnabled());
   const FillLayer& fill_layer = style.MaskLayers();
   return ComputedStyleUtils::BackgroundImageOrWebkitMaskSize(style, fill_layer);
 }
diff --git a/tools/cfi/ignores.txt b/tools/cfi/ignores.txt
index 73080483ab32b..9304584dedea4 100644
--- a/tools/cfi/ignores.txt
+++ b/tools/cfi/ignores.txt
@@ -144,6 +144,8 @@ type:sandbox::TargetServices
 
 [cfi-icall]
 
+fun:ft_size_reset_iterator
+
 ######### Cross-DSO icalls using dynamically resolved symbols crbug.com/771365
 
 # ANGLE
