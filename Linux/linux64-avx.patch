diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index d0b55ce295fdf..fb38a5630fbd7 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -349,6 +349,7 @@ config("compiler") {
 
     if (use_lld) {
       ldflags += [ "-fuse-ld=lld" ]
+      ldflags += [ "-Wl,--threads=8" ]
       if (lld_path != "") {
         ldflags += [ "-B$lld_path" ]
       }
@@ -666,11 +667,28 @@ config("compiler") {
     cflags += [
       "-flto=thin",
       "-fsplit-lto-unit",
+      "-mllvm", "-adce-remove-loops",
+      "-mllvm", "-aggressive-ext-opt",
+      "-mllvm", "-enable-cse-in-irtranslator",
+      "-mllvm", "-enable-cse-in-legalizer",
+      "-mllvm", "-enable-gvn-hoist",
+      "-mllvm", "-gvn-hoist-max-bbs=-1",
+      "-mllvm", "-gvn-hoist-max-depth=-1",
+      "-mllvm", "-gvn-hoist-max-chain-length=-1",
+      "-mllvm", "-enable-interleaved-mem-accesses",
+      "-mllvm", "-enable-masked-interleaved-mem-accesses",
+      "-mllvm", "-enable-loopinterchange",
+      "-mllvm", "-enable-loop-distribute",
+      "-mllvm", "-enable-loop-flatten",
+      "-mllvm", "-interleave-small-loop-scalar-reduction",
+      "-mllvm", "-loop-rotate-multi",
+      "-mllvm", "-scalar-evolution-use-expensive-range-sharpening",
+      "-mllvm", "-extra-vectorizer-passes",
     ]
 
     # Limit the size of the ThinLTO cache to the lesser of 10% of
     # available disk space, 40GB and 100000 files.
-    cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
+    # cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
 
     # An import limit of 30 has better performance (per speedometer) and lower
     # binary size than the default setting of 100.
@@ -687,7 +705,35 @@ config("compiler") {
         "/lldltocachepolicy:$cache_policy",
       ]
     } else {
-      ldflags += [ "-flto=thin" ]
+      ldflags += [
+        "-flto=thin",
+        "-Wl,-mllvm,-adce-remove-loops",
+        "-Wl,-mllvm,-aggressive-ext-opt",
+        "-Wl,-mllvm,-enable-cse-in-irtranslator",
+        "-Wl,-mllvm,-enable-cse-in-legalizer",
+        "-Wl,-mllvm,-enable-gvn-hoist",
+        "-Wl,-mllvm,-gvn-hoist-max-bbs=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-depth=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-chain-length=-1",
+        "-Wl,-mllvm,-enable-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-masked-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-loopinterchange",
+        "-Wl,-mllvm,-enable-loop-distribute",
+        "-Wl,-mllvm,-enable-loop-flatten",
+        "-Wl,-mllvm,-interleave-small-loop-scalar-reduction",
+        "-Wl,-mllvm,-loop-rotate-multi",
+        "-Wl,-mllvm,-scalar-evolution-use-expensive-range-sharpening",
+        "-Wl,-mllvm,-extra-vectorizer-passes",
+        "-Wl,-mllvm,-polly",
+        "-Wl,-mllvm,-polly-2nd-level-tiling",
+        "-Wl,-mllvm,-polly-detect-profitability-min-per-loop-insts=40",
+        "-Wl,-mllvm,-polly-invariant-load-hoisting",
+        "-Wl,-mllvm,-polly-loopfusion-greedy",
+        "-Wl,-mllvm,-polly-register-tiling",
+        "-Wl,-mllvm,-polly-run-dce",
+        "-Wl,-mllvm,-polly-vectorizer=stripmine",
+        # "-Wl,-mllvm,-pass-remarks-analysis=polly",
+     ]
 
       # Enabling ThinLTO on Chrome OS too, in an effort to reduce the memory
       # usage in crbug.com/1038040. Note this will increase build time in
@@ -705,12 +751,12 @@ config("compiler") {
           "-Wcrl,object_path_lto",
         ]
       } else {
-        ldflags +=
-            [ "-Wl,--thinlto-cache-dir=" +
-              rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
+        # ldflags +=
+        #     [ "-Wl,--thinlto-cache-dir=" +
+        #       rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
       }
 
-      ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
+      # ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
 
       if (is_chromeos) {
         # ARM was originally set lower than x86 to keep the size
@@ -886,6 +932,8 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-feature=+avx,+aes",
   ]
   if (rust_abi_target != "") {
     rustflags += [ "--target=$rust_abi_target" ]
@@ -918,12 +966,13 @@ config("rust_defer_lto_to_linker") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 3
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     rustflags = [ "-Clto=thin" ]
@@ -941,15 +990,16 @@ config("thinlto_optimize_default") {
 config("thinlto_optimize_max") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     if (thin_lto_enable_optimizations) {
-      lto_opt_level = 2
+      lto_opt_level = 3
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 3
     }
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     rustflags = [ "-Clto=thin" ]
@@ -983,7 +1033,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-mavx", "-maes",
       ]
       ldflags += [ "-m64" ]
     } else if (current_cpu == "x86") {
@@ -2067,11 +2117,12 @@ if (is_win) {
       # can be removed at link time with --gc-sections.
       "-fdata-sections",
       "-ffunction-sections",
+      "-funique-section-names",
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
       # smaller.
-      common_optimize_on_cflags += [ "-fno-unique-section-names" ]
+      # common_optimize_on_cflags += [ "-fno-unique-section-names" ]
     }
 
     common_optimize_on_ldflags += [
@@ -2131,7 +2182,7 @@ config("optimize") {
   } else if (optimize_for_size) {
     # Favor size over speed.
     if (is_clang) {
-      cflags = [ "-Oz" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
 
       if (use_ml_inliner && is_a_target_toolchain) {
         cflags += [
@@ -2140,12 +2191,12 @@ config("optimize") {
         ]
       }
     } else {
-      cflags = [ "-Os" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
 
     # Like with `-Oz` on Clang, `-Copt-level=z` will also turn off loop
     # vectorization.
-    rustflags = [ "-Copt-level=z" ]
+    rustflags = [ "-Copt-level=s" ]
   } else if (is_chromeos) {
     # TODO(gbiv): This is partially favoring size over speed. CrOS exclusively
     # uses clang, and -Os in clang is more of a size-conscious -O2 than "size at
@@ -2159,7 +2210,7 @@ config("optimize") {
     # vectorization while otherwise optimizing for size.
     rustflags = [ "-Copt-level=s" ]
   } else {
-    cflags = [ "-O2" ] + common_optimize_on_cflags
+    cflags = [ "-O3" ] + common_optimize_on_cflags
 
     # The `-O3` for clang turns on extra optimizations compared to the standard
     # `-O2`. But for rust, `-Copt-level=3` is the default and is thus reliable
@@ -2230,7 +2281,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/chrome/installer/linux/common/repo.cron b/chrome/installer/linux/common/repo.cron
index 15bbf25f2b443..49829c0ac2410 100755
--- a/chrome/installer/linux/common/repo.cron
+++ b/chrome/installer/linux/common/repo.cron
@@ -17,28 +17,6 @@
 # "false" as desired. An empty $DEFAULTS_FILE is the same as setting both values
 # to "false".
 
-@@include@@../common/variables.include
+# @@include@@../common/variables.include
 
-@@include@@apt.include
-
-## MAIN ##
-if [ -r "$DEFAULTS_FILE" ]; then
-  . "$DEFAULTS_FILE"
-fi
-
-install_key
-
-if [ "$repo_add_once" = "true" ]; then
-  create_sources_lists
-  RES=$?
-  # Sources creation succeeded, so stop trying.
-  if [ $RES -ne 2 ]; then
-    sed -i -e 's/[[:space:]]*repo_add_once=.*/repo_add_once="false"/' "$DEFAULTS_FILE"
-  fi
-else
-  update_bad_sources
-fi
-
-if [ "$repo_reenable_on_distupgrade" = "true" ]; then
-  handle_distro_upgrade
-fi
+# @@include@@apt.include
diff --git a/chrome/installer/linux/debian/postinst b/chrome/installer/linux/debian/postinst
index c1db53387a9c8..631fe61eefa72 100755
--- a/chrome/installer/linux/debian/postinst
+++ b/chrome/installer/linux/debian/postinst
@@ -54,17 +54,6 @@ update-alternatives --install /usr/bin/gnome-www-browser gnome-www-browser \
 update-alternatives --install /usr/bin/@@PACKAGE_ORIG@@ @@PACKAGE_ORIG@@ \
   /usr/bin/@@USR_BIN_SYMLINK_NAME@@ $PRIORITY
 
-@@include@@../common/apt.include
-
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-## MAIN ##
-if [ ! -e "$DEFAULTS_FILE" ]; then
-  echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
-  echo 'repo_reenable_on_distupgrade="true"' >> "$DEFAULTS_FILE"
-fi
-
-# Run the cron job immediately to perform repository configuration.
-nohup sh /etc/cron.daily/@@PACKAGE@@ > /dev/null 2>&1 &
diff --git a/chrome/installer/linux/debian/postrm b/chrome/installer/linux/debian/postrm
index 3e1cadc8296ca..32fbab915001f 100755
--- a/chrome/installer/linux/debian/postrm
+++ b/chrome/installer/linux/debian/postrm
@@ -15,22 +15,6 @@ fi
 
 @@include@@../common/variables.include
 
-@@include@@../common/apt.include
-
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-# Only remove the defaults file if it is not empty. An empty file was probably
-# put there by the sysadmin to disable automatic repository configuration, as
-# per the instructions on the package download page.
-if [ -s "$DEFAULTS_FILE" ]; then
-  # Make sure the package defaults are removed before the repository config,
-  # otherwise it could result in the repository config being removed, but the
-  # package defaults remain and are set to not recreate the repository config.
-  # In that case, future installs won't recreate it and won't get auto-updated.
-  rm "$DEFAULTS_FILE" || exit 1
-fi
-# Remove any Google repository added by the package.
-clean_sources_lists
-uninstall_key
diff --git a/content/gpu/gpu_sandbox_hook_linux.cc b/content/gpu/gpu_sandbox_hook_linux.cc
index b00fec969991a..75f590e896796 100644
--- a/content/gpu/gpu_sandbox_hook_linux.cc
+++ b/content/gpu/gpu_sandbox_hook_linux.cc
@@ -247,6 +247,10 @@ void AddAmdGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
       "/usr/lib64/dri/r300_dri.so",
       "/usr/lib64/dri/r600_dri.so",
       "/usr/lib64/dri/radeonsi_dri.so",
+      "/usr/share/vulkan/icd.d",
+      "/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
+      "/etc/vulkan/icd.d",
+      "/etc/vulkan/icd.d/radeon_icd.x86_64.json"
       // Allow libglvnd files and libs.
       "/usr/share/glvnd/egl_vendor.d",
       "/usr/share/glvnd/egl_vendor.d/50_mesa.json",
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index b40122f4f5006..9f070732f4ce0 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -710,11 +710,11 @@ BASE_FEATURE(kVaapiVideoDecodeLinux,
 
 BASE_FEATURE(kVaapiVideoDecodeLinuxGL,
              "VaapiVideoDecodeLinuxGL",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kVaapiVideoEncodeLinux,
              "VaapiVideoEncoder",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 // Ignore the non-intel driver blacklist for VaapiVideoDecoder implementations.
 // Intended for manual usage only in order to gague the status of newer driver
@@ -1062,7 +1062,7 @@ BASE_FEATURE(kChromeOSHWVBREncoding,
 // TODO(b/159825227): remove when the direct video decoder is fully launched.
 BASE_FEATURE(kUseChromeOSDirectVideoDecoder,
              "UseChromeOSDirectVideoDecoder",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 // Limit the number of concurrent hardware decoder instances on ChromeOS.
 BASE_FEATURE(kLimitConcurrentDecoderInstances,
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index 07b991932aad5..75a2e0eabe55d 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -209,33 +209,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
-  return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
+   return true;
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -410,7 +384,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 6b5e48095e4bc..3701bdfef832a 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -74,7 +74,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -86,6 +85,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
