diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 1b3c1bd478949..da302ed2ba8b2 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1016,6 +1016,9 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+avx",
+    "-Cllvm-args=-fp-contract=off",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1079,6 +1082,7 @@ config("thinlto_optimize_default") {
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
+      ldflags += [ "-mllvm:-enable-gvn-hoist" ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
     }
@@ -1150,7 +1154,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-msse3", "-mssse3","-msse4.1", "-msse4.2", "-mavx",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -2515,7 +2519,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
@@ -2923,7 +2927,7 @@ config("minimal_symbols") {
 # names in the final debug information.
 config("no_symbols") {
   if (is_win) {
-    ldflags = [ "/DEBUG" ]
+    ldflags = [ "/DEBUG:NONE" ]
 
     # All configs using /DEBUG should include this:
     configs = [ ":win_pdbaltpath" ]
diff --git a/build/config/win/BUILD.gn b/build/config/win/BUILD.gn
index 39da6404437fc..dc0ca2d03ad51 100644
--- a/build/config/win/BUILD.gn
+++ b/build/config/win/BUILD.gn
@@ -86,7 +86,7 @@ config("compiler") {
 
   cflags += [
     # Work around crbug.com/526851, bug in VS 2015 RTM compiler.
-    "/Zc:sizedDealloc-",
+    "/Zc:sizedDealloc",
   ]
 
   if (is_clang) {
@@ -127,7 +127,7 @@ config("compiler") {
     # microarchitecture. MSVC only supports a subset of architectures, and the
     # next step after SSE2 will be AVX.
     if (current_cpu == "x86" || current_cpu == "x64") {
-      cflags += [ "-msse3" ]
+      cflags += [ "-msse3", "-mssse3","-msse4.1", "-msse4.2", "-mavx", "/clang:-w", ]
     }
 
     # Enable ANSI escape codes if something emulating them is around (cmd.exe
@@ -198,7 +198,7 @@ config("compiler") {
     if (use_lld) {
       # String tail merging leads to smaller binaries, but they don't compress
       # as well, leading to increased mini_installer size (crbug.com/838449).
-      ldflags += [ "/OPT:NOLLDTAILMERGE" ]
+      ldflags += [ "/OPT:LLDTAILMERGE" ]
     }
 
     # TODO(siggi): Is this of any use anymore?
@@ -206,7 +206,7 @@ config("compiler") {
     # PDB file by about 5%) but does not otherwise alter the output binary. It
     # is enabled opportunistically for builds where it is not prohibited (not
     # supported when incrementally linking, or using /debug:fastlink).
-    ldflags += [ "/PROFILE" ]
+    # ldflags += [ "/PROFILE" ]
   }
 
   # arflags apply only to static_libraries. The normal linker configs are only
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index 3d81e4765ea5e..f42b770d57cfb 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -335,7 +335,7 @@ BASE_FEATURE(kPlatformHEVCDecoderSupport,
 // Enables HEVC hardware accelerated encoding for Windows, Mac, and Android.
 BASE_FEATURE(kPlatformHEVCEncoderSupport,
              "PlatformHEVCEncoderSupport",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 #endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_ANDROID)
 #endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index 58801ea7a994e..78cdb9a13285f 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -222,33 +222,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -428,7 +402,7 @@ bool IsDefaultSupportedAudioType(const AudioType& type) {
 
 bool IsBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) && BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264) {
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) {
     return true;
   }
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) &&
diff --git a/media/filters/ffmpeg_glue.cc b/media/filters/ffmpeg_glue.cc
index 140d90aba760e..80c0292785ae4 100644
--- a/media/filters/ffmpeg_glue.cc
+++ b/media/filters/ffmpeg_glue.cc
@@ -160,6 +160,9 @@ const char* FFmpegGlue::GetAllowedVideoDecoders() {
     std::vector<std::string> allowed_decoders;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
     allowed_decoders.push_back("h264");
+#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
+    allowed_decoders.push_back("hevc");
+#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 #if BUILDFLAG(IS_CHROMEOS)
     if (base::FeatureList::IsEnabled(kCrOSLegacyMediaFormats)) {
       allowed_decoders.push_back("mpeg4");
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index bd75477feeabb..2b5633c3bdc09 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -76,7 +76,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -88,6 +87,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
diff --git a/tools/cfi/ignores.txt b/tools/cfi/ignores.txt
index 7a7e228632840..7842706ea3a47 100644
--- a/tools/cfi/ignores.txt
+++ b/tools/cfi/ignores.txt
@@ -147,6 +147,8 @@ type:sandbox::TargetServices
 
 [cfi-icall]
 
+fun:ft_size_reset_iterator
+
 ######### Cross-DSO icalls using dynamically resolved symbols crbug.com/771365
 
 # ANGLE
