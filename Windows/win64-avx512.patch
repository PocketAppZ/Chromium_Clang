diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 3b809a3c065f6..8e62f138acef2 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -488,9 +488,9 @@ config("compiler") {
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
   if (is_linux || is_chromeos || is_android || is_fuchsia) {
-    asmflags += [ "-fPIC" ]
-    cflags += [ "-fPIC" ]
-    ldflags += [ "-fPIC" ]
+    asmflags += [ "-fPIC", "-w", ]
+    cflags += [ "-fPIC", "-w", ]
+    ldflags += [ "-fPIC", "-w", ]
     rustflags += [ "-Crelocation-model=pic" ]
 
     if (!is_clang) {
@@ -537,9 +537,9 @@ config("compiler") {
 
     # TODO(crbug.com/345541122): investigate the fuchsia binary size increase.
     if (is_win) {
-      cflags += [ "/Zc:sizedDealloc-" ]
+      # cflags += [ "/Zc:sizedDealloc-" ]
     } else {
-      cflags += [ "-fno-sized-deallocation" ]
+      # cflags += [ "-fno-sized-deallocation" ]
     }
   }
 
@@ -591,23 +591,23 @@ config("compiler") {
     if (default_toolchain != "//build/toolchain/cros:target" &&
         !llvm_android_mainline) {
       cflags += [
-        "-mllvm",
-        "-split-threshold-for-reg-with-hint=0",
+        # "-mllvm",
+        # "-split-threshold-for-reg-with-hint=0",
       ]
       if (use_thin_lto && is_a_target_toolchain) {
         if (is_win) {
-          ldflags += [ "-mllvm:-split-threshold-for-reg-with-hint=0" ]
+          # ldflags += [ "-mllvm:-split-threshold-for-reg-with-hint=0" ]
         } else {
-          ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
+          # ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
         }
       }
     }
 
     # TODO(crbug.com/40192287): Investigate why/if this should be needed.
     if (is_win) {
-      cflags += [ "/clang:-ffp-contract=off" ]
+      cflags += [ "/clang:-ffp-contract=fast" ]
     } else {
-      cflags += [ "-ffp-contract=off" ]
+      cflags += [ "-ffp-contract=fast" ]
     }
   }
 
@@ -760,7 +760,7 @@ config("compiler") {
     # [0]: https://pinpoint-dot-chromeperf.appspot.com/job/16984a18be0000
     # [1]: https://pinpoint-dot-chromeperf.appspot.com/job/11984a18be0000
     # [2]: https://ci.chromium.org/ui/p/chromium/builders/try/android-binary-size/1848442
-    import_instr_limit = 30
+    import_instr_limit = 100
 
     if (is_win) {
       ldflags += [
@@ -1042,6 +1042,11 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-cpu=x86-64-v3",
+    "-Ztune-cpu=skylake-avx512",
+    "-Cllvm-args=-fp-contract=fast",
+    "-Awarnings",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1117,12 +1122,14 @@ config("compiler") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 2
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
+      # ldflags += [ "-opt:lldltocgo=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      # ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1150,13 +1157,15 @@ config("thinlto_optimize_max") {
     if (thin_lto_enable_optimizations) {
       lto_opt_level = 2
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 2
     }
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
+      # ldflags += [ "-opt:lldltocgo=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
+      # ldflags += [ "-Wl,--lto-CGO" + lto_opt_level ]
     }
 
     if (toolchain_supports_rust_thin_lto) {
@@ -1192,7 +1201,8 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-march=x86-64-v3",
+        "-mtune=skylake-avx512",
       ]
 
       # Minimum SIMD support for devices running lacros.
@@ -2592,6 +2602,9 @@ config("optimize_max") {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
+      if (is_clang) {
+        cflags += [ "/clang:-O3" ]
+      }
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
@@ -3005,7 +3018,7 @@ config("minimal_symbols") {
 # names in the final debug information.
 config("no_symbols") {
   if (is_win) {
-    ldflags = [ "/DEBUG" ]
+    ldflags = [ "/DEBUG:NONE" ]
 
     # All configs using /DEBUG should include this:
     configs = [ ":win_pdbaltpath" ]
diff --git a/build/config/win/BUILD.gn b/build/config/win/BUILD.gn
index 9ecf8abdcd4cc..db394c1986958 100644
--- a/build/config/win/BUILD.gn
+++ b/build/config/win/BUILD.gn
@@ -85,7 +85,7 @@ config("compiler") {
 
   cflags += [
     # Work around crbug.com/526851, bug in VS 2015 RTM compiler.
-    "/Zc:sizedDealloc-",
+    "/Zc:sizedDealloc",
   ]
 
   if (is_clang) {
@@ -126,7 +126,7 @@ config("compiler") {
     # microarchitecture. MSVC only supports a subset of architectures, and the
     # next step after SSE2 will be AVX.
     if (current_cpu == "x86" || current_cpu == "x64") {
-      cflags += [ "-msse3" ]
+      cflags += [ "/arch:AVX512", "-mtune=skylake-avx512", "/clang:-w", ]
     }
 
     # Enable ANSI escape codes if something emulating them is around (cmd.exe
@@ -197,7 +197,7 @@ config("compiler") {
     if (use_lld) {
       # String tail merging leads to smaller binaries, but they don't compress
       # as well, leading to increased mini_installer size (crbug.com/838449).
-      ldflags += [ "/OPT:NOLLDTAILMERGE" ]
+      ldflags += [ "/OPT:LLDTAILMERGE" ]
     }
 
     # TODO(siggi): Is this of any use anymore?
@@ -205,7 +205,7 @@ config("compiler") {
     # PDB file by about 5%) but does not otherwise alter the output binary. It
     # is enabled opportunistically for builds where it is not prohibited (not
     # supported when incrementally linking, or using /debug:fastlink).
-    ldflags += [ "/PROFILE" ]
+    # ldflags += [ "/PROFILE" ]
   }
 
   # arflags apply only to static_libraries. The normal linker configs are only
diff --git a/chrome/installer/mini_installer/mini_installer_exe_main.cc b/chrome/installer/mini_installer/mini_installer_exe_main.cc
index aff0370044046..811529a08db83 100644
--- a/chrome/installer/mini_installer/mini_installer_exe_main.cc
+++ b/chrome/installer/mini_installer/mini_installer_exe_main.cc
@@ -59,7 +59,7 @@ void* memset(void* dest, int c, size_t count) {
   return dest;
 }
 
-#if defined(_DEBUG) && defined(ARCH_CPU_ARM64)
+// #if defined(_DEBUG) && defined(ARCH_CPU_ARM64)
 // The compiler generates calls to memcpy for ARM64 debug builds so we need to
 // supply a memcpy implementation in that configuration.
 // See comments above for why we do this incantation.
@@ -71,5 +71,5 @@ void* memcpy(void* destination, const void* source, size_t count) {
     *dst++ = *src++;
   return destination;
 }
-#endif
+// #endif
 }  // extern "C"
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index de9d4be3b92e8..71adb49d815db 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -223,33 +223,14 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
+#if BUILDFLAG(IS_ANDROID)
+  if (base::FeatureList::IsEnabled(kBuiltInH264Decoder)) {
     return true;
   }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  if (!base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport)) {
-    return false;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
   return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
 #else
   return true;
-#endif  // BUIDFLAG(PLATFORM_HAS_OPTIONAL_HEVC_SUPPORT)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
+#endif  // BUILDFLAG(IS_ANDROID)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -442,7 +423,9 @@ bool IsDefaultSupportedAudioType(const AudioType& type) {
 
 bool IsBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS) && BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264 &&
+  // Android does bundle `FFMpegVideoDecoder` for `non-arm32` devices,
+  // but not enabled by default.
+  if ((codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) &&
       base::FeatureList::IsEnabled(kBuiltInH264Decoder)) {
     return true;
   }
diff --git a/media/filters/ffmpeg_glue.cc b/media/filters/ffmpeg_glue.cc
index 229818059dc2c..605996037378b 100644
--- a/media/filters/ffmpeg_glue.cc
+++ b/media/filters/ffmpeg_glue.cc
@@ -174,7 +174,7 @@ const char* FFmpegGlue::GetAllowedAudioDecoders() {
 const char* FFmpegGlue::GetAllowedVideoDecoders() {
   // This should match the configured lists in //third_party/ffmpeg.
 #if BUILDFLAG(USE_PROPRIETARY_CODECS) && BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
-  return IsBuiltInVideoCodec(VideoCodec::kH264) ? "h264" : "";
+  return IsBuiltInVideoCodec(VideoCodec::kH264) ? "h264,hevc" : "";
 #else
   return "";
 #endif
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 3f9cef0391af5..a5954f298ca38 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "media/base/video_codecs.h"
 #ifdef UNSAFE_BUFFERS_BUILD
 // TODO(crbug.com/40285824): Remove this and convert code to safer constructs.
 #pragma allow_unsafe_buffers
@@ -82,7 +83,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -93,6 +93,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       NOTREACHED();
 
     case VideoCodec::kH264:
+    case VideoCodec::kHEVC:
       // Normalize to three threads for 1080p content, then scale linearly
       // with number of pixels.
       // Examples:
@@ -126,8 +127,9 @@ static void ReleaseVideoBufferImpl(void* opaque, uint8_t* data) {
 
 // static
 bool FFmpegVideoDecoder::IsCodecSupported(VideoCodec codec) {
-  // We only build support for H.264.
-  return codec == VideoCodec::kH264 && IsBuiltInVideoCodec(codec);
+  // We only build support for H.264 / H.264.
+  return (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC) &&
+         IsBuiltInVideoCodec(codec);
 }
 
 FFmpegVideoDecoder::FFmpegVideoDecoder(MediaLog* media_log)
diff --git a/media/webrtc/webrtc_features.cc b/media/webrtc/webrtc_features.cc
index a0a0649d5e5f6..ed1ffd27092fb 100644
--- a/media/webrtc/webrtc_features.cc
+++ b/media/webrtc/webrtc_features.cc
@@ -75,14 +75,14 @@ BASE_FEATURE(kWebRtcApmTellsIfPlayoutReferenceIsNeeded,
 // negotiate usage of H.265 in SDP in the direction of sending.
 BASE_FEATURE(kWebRtcAllowH265Send,
              "WebRtcAllowH265Send",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 // When enabled, allow H.265 codec to be used for receiving WebRTC streams.
 // Platform hardware H.265 decoder needs to be supported and enabled in order to
 // negotiate usage of H.265 in SDP in the direction of receiving.
 BASE_FEATURE(kWebRtcAllowH265Receive,
              "WebRtcAllowH265Receive",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 #if BUILDFLAG(IS_ANDROID)
 // Kill-switch for using 48 kHz as sample rate for Audio Processing Module
--- a/tools/cfi/ignores.txt
+++ b/tools/cfi/ignores.txt
@@ -147,6 +147,8 @@ type:sandbox::TargetServices
 
 [cfi-icall]
 
+fun:ft_size_reset_iterator
+
 ######### Cross-DSO icalls using dynamically resolved symbols crbug.com/771365
 
 # ANGLE
