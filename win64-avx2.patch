diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 3eede98ae4e1d..94b36d10d6619 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -554,7 +554,7 @@ config("compiler") {
 
     # TODO(crbug.com/1235145): Investigate why/if this should be needed.
     if (is_win) {
-      cflags += [ "/clang:-ffp-contract=off" ]
+      cflags += [ "/clang:-ffp-contract=fast" ]
     } else {
       cflags += [ "-ffp-contract=off" ]
     }
@@ -653,9 +653,28 @@ config("compiler") {
       "-fsplit-lto-unit",
     ]
 
+    cflags += [
+        "-mllvm", "-adce-remove-loops",
+        "-mllvm", "-enable-cse-in-irtranslator",
+        "-mllvm", "-enable-cse-in-legalizer",
+        "-mllvm", "-scalar-evolution-use-expensive-range-sharpening",
+        "-mllvm", "-loop-rotate-multi",
+        "-mllvm", "-enable-loopinterchange",
+        "-mllvm", "-enable-loop-distribute",
+        "-mllvm", "-enable-loop-flatten",
+        "-mllvm", "-enable-loop-versioning-licm",
+        "-mllvm", "-interleave-small-loop-scalar-reduction",
+        "-mllvm", "-enable-interleaved-mem-accesses",
+        "-mllvm", "-enable-masked-interleaved-mem-accesses",
+        "-mllvm", "-enable-gvn-hoist",
+        "-mllvm", "-gvn-hoist-max-bbs=-1",
+        "-mllvm", "-gvn-hoist-max-depth=-1",
+        "-mllvm", "-gvn-hoist-max-chain-length=-1",
+    ]
+
     # Limit the size of the ThinLTO cache to the lesser of 10% of
     # available disk space, 40GB and 100000 files.
-    cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
+    # cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
 
     # An import limit of 30 has better performance (per speedometer) and lower
     # binary size than the default setting of 100.
@@ -667,13 +686,55 @@ config("compiler") {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
-        "/lldltocache:" +
-            rebase_path("$root_out_dir/thinlto-cache", root_build_dir),
-        "/lldltocachepolicy:$cache_policy",
+        # "/lldltocache:" +
+        #     rebase_path("$root_out_dir/thinlto-cache", root_build_dir),
+        # "/lldltocachepolicy:$cache_policy",
+      ]
+
+      ldflags += [
+        "-mllvm:-adce-remove-loops",
+        "-mllvm:-enable-cse-in-irtranslator",
+        "-mllvm:-enable-cse-in-legalizer",
+        "-mllvm:-scalar-evolution-use-expensive-range-sharpening",
+        "-mllvm:-loop-rotate-multi",
+        "-mllvm:-enable-loopinterchange",
+        "-mllvm:-enable-loop-distribute",
+        "-mllvm:-enable-loop-flatten",
+        "-mllvm:-enable-loop-versioning-licm",
+        "-mllvm:-interleave-small-loop-scalar-reduction",
+        "-mllvm:-enable-interleaved-mem-accesses",
+        "-mllvm:-enable-masked-interleaved-mem-accesses",
+        "-mllvm:-enable-gvn-hoist",
+        "-mllvm:-gvn-hoist-max-bbs=-1",
+        "-mllvm:-gvn-hoist-max-depth=-1",
+        "-mllvm:-gvn-hoist-max-chain-length=-1",
+        # "-mllvm:-enable-nontrivial-unswitch",
+        # "-mllvm:-enable-ext-tsp-block-placement",
+        # "-mllvm:-enable-constraint-elimination",
       ]
+
     } else {
       ldflags += [ "-flto=thin" ]
 
+      ldflags += [
+        "-Wl,-mllvm,-adce-remove-loops",
+        "-Wl,-mllvm,-enable-cse-in-irtranslator",
+        "-Wl,-mllvm,-enable-cse-in-legalizer",
+        "-Wl,-mllvm,-scalar-evolution-use-expensive-range-sharpening",
+        "-Wl,-mllvm,-loop-rotate-multi",
+        "-Wl,-mllvm,-enable-loopinterchange",
+        "-Wl,-mllvm,-enable-loop-distribute",
+        "-Wl,-mllvm,-enable-loop-flatten",
+        "-Wl,-mllvm,-enable-loop-versioning-licm",
+        "-Wl,-mllvm,-interleave-small-loop-scalar-reduction",
+        "-Wl,-mllvm,-enable-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-masked-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-gvn-hoist",
+        "-Wl,-mllvm,-gvn-hoist-max-bbs=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-depth=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-chain-length=-1",
+      ]
+
       # Enabling ThinLTO on Chrome OS too, in an effort to reduce the memory
       # usage in crbug.com/1038040. Note this will increase build time in
       # Chrome OS.
@@ -694,12 +755,12 @@ config("compiler") {
           "-Wcrl,object_path_lto" + _object_path_suffix,
         ]
       } else {
-        ldflags +=
-            [ "-Wl,--thinlto-cache-dir=" +
-              rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
+        # ldflags +=
+        #     [ "-Wl,--thinlto-cache-dir=" +
+        #       rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
       }
 
-      ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
+      # ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
 
       if (is_chromeos) {
         # ARM was originally set lower than x86 to keep the size
@@ -861,6 +922,8 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-cpu=haswell", "-Ctarget-feature=+aes,+vaes",
   ]
   if (rust_abi_target != "") {
     rustflags += [ "--target=$rust_abi_target" ]
@@ -885,7 +948,7 @@ config("compiler") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 2
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
@@ -908,7 +971,7 @@ config("thinlto_optimize_max") {
     if (thin_lto_enable_optimizations) {
       lto_opt_level = 2
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 2
     }
 
     if (is_win) {
@@ -940,7 +1003,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-march=native",
       ]
       ldflags += [ "-m64" ]
     } else if (current_cpu == "x86") {
@@ -2100,7 +2163,7 @@ config("optimize") {
   } else if (optimize_for_size) {
     # Favor size over speed.
     if (is_clang) {
-      cflags = [ "-Oz" ] + common_optimize_on_cflags
+      cflags = [ "-O2" ] + common_optimize_on_cflags
 
       if (use_ml_inliner && is_a_target_toolchain) {
         cflags += [
@@ -2191,7 +2254,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
@@ -2557,7 +2620,7 @@ config("minimal_symbols") {
 # names in the final debug information.
 config("no_symbols") {
   if (is_win) {
-    ldflags = [ "/DEBUG" ]
+    ldflags = [ "/DEBUG:NONE" ]
 
     # All configs using /DEBUG should include this:
     configs = [ ":win_pdbaltpath" ]
diff --git a/build/config/win/BUILD.gn b/build/config/win/BUILD.gn
index a5075393b1231..f7b896c2f5da7 100644
--- a/build/config/win/BUILD.gn
+++ b/build/config/win/BUILD.gn
@@ -89,7 +89,7 @@ config("compiler") {
 
   cflags += [
     # Work around crbug.com/526851, bug in VS 2015 RTM compiler.
-    "/Zc:sizedDealloc-",
+    # "/Zc:sizedDealloc-",
   ]
 
   if (is_clang) {
@@ -130,7 +130,7 @@ config("compiler") {
     # microarchitecture. MSVC only supports a subset of architectures, and the
     # next step after SSE2 will be AVX.
     if (current_cpu == "x86" || current_cpu == "x64") {
-      cflags += [ "-msse3" ]
+      cflags += [ "/arch:AVX2", "-maes", "-mvaes", ]
     }
 
     if (exec_script("//build/win/use_ansi_codes.py", [], "trim string") ==
@@ -192,7 +192,7 @@ config("compiler") {
     if (use_lld) {
       # String tail merging leads to smaller binaries, but they don't compress
       # as well, leading to increased mini_installer size (crbug.com/838449).
-      ldflags += [ "/OPT:NOLLDTAILMERGE" ]
+      # ldflags += [ "/OPT:NOLLDTAILMERGE" ]
     }
 
     # TODO(siggi): Is this of any use anymore?
@@ -200,7 +200,7 @@ config("compiler") {
     # PDB file by about 5%) but does not otherwise alter the output binary. It
     # is enabled opportunistically for builds where it is not prohibited (not
     # supported when incrementally linking, or using /debug:fastlink).
-    ldflags += [ "/PROFILE" ]
+    # ldflags += [ "/PROFILE" ]
   }
 
   # arflags apply only to static_libraries. The normal linker configs are only
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index c47d83f0c0641..3d8fd8f583907 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -201,35 +201,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || \
-    BUILDFLAG(IS_MAC)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#elif BUILDFLAG(IS_ANDROID)
-  // Technically android 5.0 mandates support for only HEVC main profile,
-  // however some platforms (like chromecast) have had more profiles supported
-  // so we'll see what happens if we just enable them all.
-  return base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport);
-#else
   return true;
-#endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) ||
-        // BUILDFLAG(IS_MAC)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -405,7 +377,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 78195a324a07b..0d012608862aa 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -40,7 +40,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -52,6 +51,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
