diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index ef3285ae74e1b..906d641ae9b25 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1,4 +1,4 @@
-# Copyright 2013 The Chromium Authors
+=# Copyright 2013 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
@@ -671,9 +671,27 @@ config("compiler") {
       "-fsplit-lto-unit",
     ]
 
+    cflags += [
+        "-mllvm", "-adce-remove-loops",
+        "-mllvm", "-enable-cse-in-irtranslator",
+        "-mllvm", "-enable-cse-in-legalizer",
+        "-mllvm", "-scalar-evolution-use-expensive-range-sharpening",
+        "-mllvm", "-loop-rotate-multi",
+        "-mllvm", "-enable-loopinterchange",
+        "-mllvm", "-enable-loop-distribute",
+        "-mllvm", "-enable-loop-flatten",
+        "-mllvm", "-interleave-small-loop-scalar-reduction",
+        "-mllvm", "-enable-interleaved-mem-accesses",
+        "-mllvm", "-enable-masked-interleaved-mem-accesses",
+        "-mllvm", "-enable-gvn-hoist",
+        "-mllvm", "-gvn-hoist-max-bbs=-1",
+        "-mllvm", "-gvn-hoist-max-depth=-1",
+        "-mllvm", "-gvn-hoist-max-chain-length=-1",
+    ]
+
     # Limit the size of the ThinLTO cache to the lesser of 10% of
     # available disk space, 40GB and 100000 files.
-    cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
+    # cache_policy = "cache_size=10%:cache_size_bytes=40g:cache_size_files=100000"
 
     # An import limit of 30 has better performance (per speedometer) and lower
     # binary size than the default setting of 100.
@@ -692,6 +710,30 @@ config("compiler") {
     } else {
       ldflags += [ "-flto=thin" ]
 
+      ldflags += [
+        "-Wl,-mllvm,-adce-remove-loops",
+        "-Wl,-mllvm,-enable-cse-in-irtranslator",
+        "-Wl,-mllvm,-enable-cse-in-legalizer",
+        "-Wl,-mllvm,-scalar-evolution-use-expensive-range-sharpening",
+        "-Wl,-mllvm,-loop-rotate-multi",
+        "-Wl,-mllvm,-enable-loopinterchange",
+        "-Wl,-mllvm,-enable-loop-distribute",
+        "-Wl,-mllvm,-enable-loop-flatten",
+        "-Wl,-mllvm,-interleave-small-loop-scalar-reduction",
+        "-Wl,-mllvm,-enable-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-masked-interleaved-mem-accesses",
+        "-Wl,-mllvm,-enable-gvn-hoist",
+        "-Wl,-mllvm,-gvn-hoist-max-bbs=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-depth=-1",
+        "-Wl,-mllvm,-gvn-hoist-max-chain-length=-1",
+        "-Wl,-mllvm,-polly",
+        "-Wl,-mllvm,-polly-detect-profitability-min-per-loop-insts=40",
+        "-Wl,-mllvm,-polly-invariant-load-hoisting",
+        "-Wl,-mllvm,-polly-run-dce",
+        "-Wl,-mllvm,-polly-vectorizer=stripmine",
+        # "-Wl,-mllvm,-pass-remarks-analysis=polly",
+      ]
+
       # Enabling ThinLTO on Chrome OS too, in an effort to reduce the memory
       # usage in crbug.com/1038040. Note this will increase build time in
       # Chrome OS.
@@ -712,12 +754,12 @@ config("compiler") {
           "-Wcrl,object_path_lto" + _object_path_suffix,
         ]
       } else {
-        ldflags +=
-            [ "-Wl,--thinlto-cache-dir=" +
-              rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
+        # ldflags +=
+        #     [ "-Wl,--thinlto-cache-dir=" +
+        #       rebase_path("$root_out_dir/thinlto-cache", root_build_dir) ]
       }
 
-      ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
+      # ldflags += [ "-Wl,--thinlto-cache-policy=$cache_policy" ]
 
       if (is_chromeos) {
         # ARM was originally set lower than x86 to keep the size
@@ -887,6 +929,8 @@ config("compiler") {
     # For deterministic builds, keep the local machine's current working
     # directory from appearing in build outputs.
     "-Zremap-cwd-prefix=.",
+
+    "-Ctarget-feature=+avx,+aes,-pclmul",
   ]
   if (rust_abi_target != "") {
     rustflags += [ "--target=$rust_abi_target" ]
@@ -923,7 +967,7 @@ config("rust_defer_lto_to_linker") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 2
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
@@ -948,7 +992,7 @@ config("thinlto_optimize_max") {
     if (thin_lto_enable_optimizations) {
       lto_opt_level = 2
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 2
     }
 
     if (is_win) {
@@ -988,7 +1032,7 @@ config("compiler_cpu_abi") {
     if (current_cpu == "x64") {
       cflags += [
         "-m64",
-        "-msse3",
+        "-mavx", "-maes", "-mvaes", "-mpclmul",
       ]
       ldflags += [ "-m64" ]
     } else if (current_cpu == "x86") {
@@ -2062,11 +2106,12 @@ if (is_win) {
       # can be removed at link time with --gc-sections.
       "-fdata-sections",
       "-ffunction-sections",
+      "-funique-section-names"
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
       # smaller.
-      common_optimize_on_cflags += [ "-fno-unique-section-names" ]
+      # common_optimize_on_cflags += [ "-fno-unique-section-names" ]
     }
 
     common_optimize_on_ldflags += [
@@ -2126,7 +2171,7 @@ config("optimize") {
   } else if (optimize_for_size) {
     # Favor size over speed.
     if (is_clang) {
-      cflags = [ "-Oz" ] + common_optimize_on_cflags
+      cflags = [ "-O2" ] + common_optimize_on_cflags
 
       if (use_ml_inliner && is_a_target_toolchain) {
         cflags += [
@@ -2140,7 +2185,7 @@ config("optimize") {
 
     # Like with `-Oz` on Clang, `-Copt-level=z` will also turn off loop
     # vectorization.
-    rustflags = [ "-Copt-level=z" ]
+    rustflags = [ "-Copt-level=s" ]
   } else if (is_chromeos) {
     # TODO(gbiv): This is partially favoring size over speed. CrOS exclusively
     # uses clang, and -Os in clang is more of a size-conscious -O2 than "size at
@@ -2225,7 +2270,7 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      cflags = [ "-O3" ] + common_optimize_on_cflags
     }
     rustflags = [ "-Copt-level=3" ]
   }
diff --git a/chrome/installer/linux/debian/postinst b/chrome/installer/linux/debian/postinst
index c1db53387a9c8..d848f17dee293 100755
--- a/chrome/installer/linux/debian/postinst
+++ b/chrome/installer/linux/debian/postinst
@@ -54,17 +54,8 @@ update-alternatives --install /usr/bin/gnome-www-browser gnome-www-browser \
 update-alternatives --install /usr/bin/@@PACKAGE_ORIG@@ @@PACKAGE_ORIG@@ \
   /usr/bin/@@USR_BIN_SYMLINK_NAME@@ $PRIORITY
 
-@@include@@../common/apt.include
+# @@include@@../common/apt.include
 
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-## MAIN ##
-if [ ! -e "$DEFAULTS_FILE" ]; then
-  echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
-  echo 'repo_reenable_on_distupgrade="true"' >> "$DEFAULTS_FILE"
-fi
-
-# Run the cron job immediately to perform repository configuration.
-nohup sh /etc/cron.daily/@@PACKAGE@@ > /dev/null 2>&1 &
diff --git a/chrome/installer/linux/debian/postrm b/chrome/installer/linux/debian/postrm
index 3e1cadc8296ca..aa5848db6913f 100755
--- a/chrome/installer/linux/debian/postrm
+++ b/chrome/installer/linux/debian/postrm
@@ -15,22 +15,8 @@ fi
 
 @@include@@../common/variables.include
 
-@@include@@../common/apt.include
+# @@include@@../common/apt.include
 
 @@include@@../common/symlinks.include
 
 remove_udev_symlinks
-
-# Only remove the defaults file if it is not empty. An empty file was probably
-# put there by the sysadmin to disable automatic repository configuration, as
-# per the instructions on the package download page.
-if [ -s "$DEFAULTS_FILE" ]; then
-  # Make sure the package defaults are removed before the repository config,
-  # otherwise it could result in the repository config being removed, but the
-  # package defaults remain and are set to not recreate the repository config.
-  # In that case, future installs won't recreate it and won't get auto-updated.
-  rm "$DEFAULTS_FILE" || exit 1
-fi
-# Remove any Google repository added by the package.
-clean_sources_lists
-uninstall_key
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index 167f13b438271..16242f82892ee 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -684,7 +684,7 @@ BASE_FEATURE(kVaapiVideoDecodeLinux,
 
 BASE_FEATURE(kVaapiVideoDecodeLinuxGL,
              "VaapiVideoDecodeLinuxGL",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kVaapiVideoEncodeLinux,
              "VaapiVideoEncoder",
@@ -1023,7 +1023,7 @@ BASE_FEATURE(kChromeOSHWVBREncoding,
 // TODO(b/159825227): remove when the direct video decoder is fully launched.
 BASE_FEATURE(kUseChromeOSDirectVideoDecoder,
              "UseChromeOSDirectVideoDecoder",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 // Limit the number of concurrent hardware decoder instances on ChromeOS.
 BASE_FEATURE(kLimitConcurrentDecoderInstances,
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index c22b9ce775e6b..0d94795888f30 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -204,35 +204,7 @@ bool IsAudioCodecProprietary(AudioCodec codec) {
 #endif  // !BUILDFLAG(USE_PROPRIETARY_CODECS)
 
 bool IsHevcProfileSupported(const VideoType& type) {
-  if (!IsColorSpaceSupported(type.color_space))
-    return false;
-
-#if BUILDFLAG(ENABLE_PLATFORM_HEVC)
-#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || \
-    BUILDFLAG(IS_MAC)
-#if BUILDFLAG(IS_CHROMEOS_LACROS)
-  // TODO(b/171813538): For Lacros, the supplemental profile cache will be
-  // asking lacros-gpu, but we will be doing decoding in ash-gpu. Until the
-  // codec detection is plumbed through to ash-gpu we can do this extra check
-  // for HEVC support.
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          switches::kLacrosEnablePlatformHevc)) {
-    return true;
-  }
-#endif  // BUILDFLAG(IS_CHROMEOS_LACROS)
-  return GetSupplementalProfileCache()->IsProfileSupported(type.profile);
-#elif BUILDFLAG(IS_ANDROID)
-  // Technically android 5.0 mandates support for only HEVC main profile,
-  // however some platforms (like chromecast) have had more profiles supported
-  // so we'll see what happens if we just enable them all.
-  return base::FeatureList::IsEnabled(kPlatformHEVCDecoderSupport);
-#else
   return true;
-#endif  // BUILDFLAG(IS_WIN) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) ||
-        // BUILDFLAG(IS_MAC)
-#else
-  return false;
-#endif  // BUILDFLAG(ENABLE_PLATFORM_HEVC)
 }
 
 bool IsVp9ProfileSupported(const VideoType& type) {
@@ -399,7 +371,7 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
   if (codec == VideoCodec::kVP8)
     return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
-  if (codec == VideoCodec::kH264)
+  if (codec == VideoCodec::kH264 || codec == VideoCodec::kHEVC)
     return true;
 #endif  // BUILDFLAG(USE_PROPRIETARY_CODECS)
 #endif  // BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 0945657d7ea32..81fc73d3f41c1 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -39,7 +39,6 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
     case VideoCodec::kUnknown:
     case VideoCodec::kVC1:
     case VideoCodec::kMPEG2:
-    case VideoCodec::kHEVC:
     case VideoCodec::kVP9:
     case VideoCodec::kAV1:
     case VideoCodec::kDolbyVision:
@@ -51,6 +50,7 @@ static int GetFFmpegVideoDecoderThreadCount(const VideoDecoderConfig& config) {
       // No extra threads for these codecs.
       break;
 
+    case VideoCodec::kHEVC:
     case VideoCodec::kH264:
     case VideoCodec::kVP8:
       // Normalize to three threads for 1080p content, then scale linearly
diff --git a/tools/clang/scripts/build.py b/tools/clang/scripts/build.py
index 4b3346bfd8682..86349c80f0b67 100755
--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -383,6 +383,9 @@ def BuildLibXml2():
           '-DLIBXML2_WITH_XPATH=OFF',
           '-DLIBXML2_WITH_XPTR=OFF',
           '-DLIBXML2_WITH_ZLIB=OFF',
+      '-DCMAKE_ASM_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
+      '-DCMAKE_C_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
+      '-DCMAKE_CXX_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
           '..',
       ],
       msvc_arch='x64')
@@ -582,7 +585,7 @@ def main():
       help='path to MLGO inliner model to embed. Setting to '
       '\'default\', will download an official model which was '
       'trained for Chrome on Android',
-      default='default' if sys.platform.startswith('linux') else '')
+      default='default' if sys.platform.startswith('foo') else '')
   parser.add_argument('--with-android', type=gn_arg, nargs='?', const=True,
                       help='build the Android ASan runtime (linux only)',
                       default=sys.platform.startswith('linux'))
@@ -687,7 +690,7 @@ def main():
   ldflags = []
 
   targets = 'AArch64;ARM;Mips;PowerPC;RISCV;SystemZ;WebAssembly;X86'
-  projects = 'clang;lld;clang-tools-extra'
+  projects = 'clang;lld;clang-tools-extra;polly'
   if args.bolt:
     projects += ';bolt'
 
@@ -721,6 +724,9 @@ def main():
       '-DLLVM_ENABLE_CURL=OFF',
       # Build libclang.a as well as libclang.so
       '-DLIBCLANG_BUILD_STATIC=ON',
+      '-DCMAKE_ASM_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
+      '-DCMAKE_C_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
+      '-DCMAKE_CXX_FLAGS_RELEASE=-O2 -DNDEBUG -w -march=native',
   ]
 
   if sys.platform == 'darwin':
@@ -864,7 +870,7 @@ def main():
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
         # Ignore args.disable_asserts for the bootstrap compiler.
-        '-DLLVM_ENABLE_ASSERTIONS=ON',
+        '-DLLVM_ENABLE_ASSERTIONS=OFF',
     ]
     # PGO needs libclang_rt.profile but none of the other compiler-rt stuff.
     bootstrap_args.extend([
@@ -1001,7 +1007,7 @@ def main():
   if args.bolt:
     ldflags += ['-Wl,--emit-relocs', '-Wl,-znow']
 
-  default_tools = ['plugins', 'blink_gc_plugin', 'translation_unit']
+  default_tools = []
   chrome_tools = list(set(default_tools + args.extra_tools))
   if cc is not None:  base_cmake_args.append('-DCMAKE_C_COMPILER=' + cc)
   if cxx is not None: base_cmake_args.append('-DCMAKE_CXX_COMPILER=' + cxx)
